This code:
- Accepts input arguments (-s studentID or -c courseID)
- Reads "data.csv" in the current directory
- For studentID argument, displays a table of that student's marks per course with a total
- For courseID argument, calculates average and max marks, displays them, and creates a marks histogram
- For invalid inputs or no results, displays an error page
- Outputs to output.html and saves histogram.png for courses

Ensure that "data.csv" is placed in the same directory as app.py when running this program.

Let me know if you'd like me to help with anything else on this.```python
import sys
import csv
import matplotlib.pyplot as plt
from jinja2 import Template

def generate_html_student(student_id, records):
    total_marks = sum(int(r['Marks']) for r in records)
    html_template = """
    <!DOCTYPE html>
    <html>
    <head><title>Student Details</title></head>
    <body>
    <h2>Student Details</h2>
    <table border="1" cellpadding="5" cellspacing="0">
      <thead>
        <tr>
          <th>Student ID</th>
          <th>Course ID</th>
          <th>Marks</th>
        </tr>
      </thead>
      <tbody>
        {% for rec in records %}
        <tr>
          <td>{{ rec['Student ID'] }}</td>
          <td>{{ rec['Course ID'] }}</td>
          <td>{{ rec['Marks'] }}</td>
        </tr>
        {% endfor %}
        <tr>
          <td colspan="2" style="text-align:right"><b>Total Marks</b></td>
          <td><b>{{ total_marks }}</b></td>
        </tr>
      </tbody>
    </table>
    </body>
    </html>
    """
    tpl = Template(html_template)
    return tpl.render(records=records, total_marks=total_marks)

def generate_html_course(avg_marks, max_marks):
    html_template = """
    <!DOCTYPE html>
    <html>
    <head><title>Course Details</title></head>
    <body>
    <h2>Course Details</h2>
    <table border="1" cellpadding="5" cellspacing="0">
      <thead>
        <tr>
          <th>Average Marks</th>
          <th>Maximum Marks</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>{{ avg_marks }}</td>
          <td>{{ max_marks }}</td>
        </tr>
      </tbody>
    </table>
    <br>
    <img src="histogram.png" alt="Histogram of marks">
    </body>
    </html>
    """
    tpl = Template(html_template)
    return tpl.render(avg_marks=avg_marks, max_marks=max_marks)

def generate_html_error():
    html_template = """
    <!DOCTYPE html>
    <html>
    <head><title>Something Went Wrong</title></head>
    <body>
    <h2>Something Went Wrong</h2>
    <p>Wrong Inputs</p>
    </body>
    </html>
    """
    return html_template

def main():
    if len(sys.argv) != 3:
        with open("output.html", "w") as f:
            f.write(generate_html_error())
        return

    option = sys.argv[1]
    value = sys.argv[2]

    if option not in ('-s', '-c'):
        with open("output.html", "w") as f:
            f.write(generate_html_error())
        return

    try:
        with open("data.csv", newline='') as csvfile:
            reader = csv.DictReader(csvfile)
            data = list(reader)
    except Exception:
        with open("output.html", "w") as f:
            f.write(generate_html_error())
        return

    if option == '-s':
        filtered_records = [r for r in data if r['Student ID'] == value]
        if not filtered_records:
            with open("output.html", "w") as f:
                f.write(generate_html_error())
            return
        html_content = generate_html_student(value, filtered_records)
        with open("output.html", "w") as f:
            f.write(html_content)

    elif option == '-c':
        course_records = [r for r in data if r['Course ID'] == value]
        if not course_records:
            with open("output.html", "w") as f:
                f.write(generate_html_error())
            return
        marks = list(map(lambda x: int(x['Marks']), course_records))
        avg_marks = round(sum(marks) / len(marks), 1)
        max_marks = max(marks)

        plt.figure(figsize=(6,4))
        plt.hist(marks, bins=range(0, 101, 10), edgecolor='black', alpha=0.7)
        plt.xlabel('Marks')
        plt.ylabel('Frequency')
        plt.title('Marks Distribution')
        plt.savefig('histogram.png')
        plt.close()

        html_content = generate_html_course(avg_marks, max_marks)
        with open("output.html", "w") as f:
            f.write(html_content)

if __name__ == "__main__":
    main()
