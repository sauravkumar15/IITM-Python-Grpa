import sys
import csv
import matplotlib.pyplot as plt
import os
import zipfile
import subprocess

# ---------- HTML Generators ----------
def generate_html_student(student_id, records):
    total_marks = sum(int(r[2]) for r in records)
    rows = "".join(
        f"<tr><td>{student_id}</td><td>{r[1]}</td><td>{r[2]}</td></tr>" for r in records
    )
    rows += f"<tr><td colspan='2'><b>Total Marks</b></td><td>{total_marks}</td></tr>"
    html_content = f"""<!DOCTYPE html>
<html>
<head><title>Student Details</title></head>
<body>
<h2>Student Details</h2>
<table border="1">
<tr><th>Student ID</th><th>Course ID</th><th>Marks</th></tr>
{rows}
</table>
</body>
</html>
"""
    with open("output.html", "w") as f:
        f.write(html_content)

def generate_html_course(course_id, marks):
    avg_marks = sum(marks) / len(marks)
    max_marks = max(marks)
    html_content = f"""<!DOCTYPE html>
<html>
<head><title>Course Details</title></head>
<body>
<h2>Course Details</h2>
<table border="1">
<tr><th>Average Marks</th><th>Maximum Marks</th></tr>
<tr><td>{avg_marks:.2f}</td><td>{max_marks}</td></tr>
</table>
<img src="histogram.png" alt="Histogram of marks">
</body>
</html>
"""
    with open("output.html", "w") as f:
        f.write(html_content)

def generate_error_page():
    html_content = """<!DOCTYPE html>
<html>
<head>
<title>Error</title>
</head>
<body>
<h1>Something Went Wrong</h1>
<p>Please check the input parameters and try again.</p>
</body>
</html>"""
    with open("output.html", "w") as f:
        f.write(html_content)

# ---------- ZIP Creator ----------
def create_zip():
    files_to_zip = ["script.py", "data.csv"]
    if os.path.exists("output.html"):
        files_to_zip.append("output.html")
    if os.path.exists("histogram.png"):
        files_to_zip.append("histogram.png")
    if os.path.exists("run_report.py"):
        files_to_zip.append("run_report.py")

    zip_name = "student_course_report.zip"
    with zipfile.ZipFile(zip_name, "w") as zipf:
        for file in files_to_zip:
            zipf.write(file)
    print(f"ZIP file created: {zip_name}")

# ---------- Launcher Creator ----------
def create_launcher():
    launcher_code = '''import sys
import subprocess

# Change these arguments to default student or course report
default_args = ["-s", "101"]  # Example: student 101
# default_args = ["-c", "CS101"]  # Example: course CS101

try:
    subprocess.run([sys.executable, "script.py"] + default_args, check=True)
    print("Report generated successfully!")
except subprocess.CalledProcessError:
    print("Failed to generate report. Check data.csv or arguments.")
'''
    with open("run_report.py", "w") as f:
        f.write(launcher_code)

# ---------- Main Program ----------
def main():
    if not os.path.isfile("data.csv"):
        print("Error: data.csv not found!")
        generate_error_page()
        create_launcher()
        create_zip()
        return

    # Ensure arguments
    if len(sys.argv) != 3:
        print("Warning: Arguments not provided, using defaults in launcher.")
        generate_error_page()
        create_launcher()
        create_zip()
        return

    arg_type = sys.argv[1]
    arg_value = sys.argv[2]

    # Read CSV
    data = []
    with open("data.csv", newline="") as csvfile:
        reader = csv.reader(csvfile)
        for row in reader:
            if len(row) == 3:
                data.append(row)

    if arg_type == "-s":
        student_data = [r for r in data if r[0] == arg_value]
        if not student_data:
            generate_error_page()
        else:
            generate_html_student(arg_value, student_data)
    elif arg_type == "-c":
        course_data = [int(r[2]) for r in data if r[1] == arg_value]
        if not course_data:
            generate_error_page()
        else:
            plt.hist(course_data, bins=10, edgecolor='black')
            plt.title(f"Marks Distribution for Course {arg_value}")
            plt.xlabel("Marks")
            plt.ylabel("Number of Students")
            plt.savefig("histogram.png")
            plt.close()
            generate_html_course(arg_value, course_data)
    else:
        generate_error_page()

    # Create launcher and zip
    create_launcher()
    create_zip()

if __name__ == "__main__":
    main()
